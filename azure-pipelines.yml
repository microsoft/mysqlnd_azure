# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- mysqli_known_cases_to_unittests

pool:

  name: OrcaDebian

variables:

  WorkingDir: '$(Agent.BuildDirectory)/php-unit-tests'



steps:
- script: ' git clone https://$USER:$TOKEN@msdata.visualstudio.com/DefaultCollection/Database%20Systems/_git/orcasql-php-mysqlnd-azure-test . '

- script: 'ls  $(Agent.BuildDirectory); /usr/bin/docker ps -q | xargs -r /usr/bin/docker stop; /usr/bin/docker system prune -f; docker image rm phpunittests -f'

  displayName: 'Cleanup Ahead'

  condition: succeededOrFailed()



- task: Docker@0

  displayName: Build

  inputs:

    dockerFile: '$(WorkingDir)/dockerfile'

    buildArguments: |
     php_v=$(php_version)
     redirect_option=$(redirect_option)
     mysqlnd_azure_branch=$(mysqlnd_azure_branch)

    imageName: phpunittests



- task: Docker@0

  displayName: Run

  inputs:

    action: 'Run an image'

    imageName: phpunittests

    envVars: |
     host=$(db_host)
     port=$(db_port)
     password=$(db_pass)
     test_cases=$(test_cases)
     server_version=$(server_version)
     user=$(db_user)
     ssl=$(ssl)
     redirect_option=$(redirect_option)

    detached: false

  condition: and(not(Canceled()), succeeded())



- script: ' /usr/bin/docker ps -q | xargs -r /usr/bin/docker stop; /usr/bin/docker system prune -f; docker image rm phpunittests -f'

  displayName: 'Cleanup Afterwards'

  condition: always()




